/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ElevenLabsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian6 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_MODEL_ID = "eleven_monolingual_v1";
var DEFAULT_SETTINGS = {
  apiKey: "",
  selectedVoiceId: null,
  selectedModelId: null,
  voiceSettings: {}
};
var ElevenLabsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc("Your Eleven Labs API Key").addText(
      (text) => text.setPlaceholder("Enter your API Key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
        this.plugin.settings.apiKey = value;
        await this.plugin.saveSettings();
      }).inputEl.type = "password"
      // Set input type to password
    );
  }
};

// src/eleven_labs_api.ts
var import_obsidian2 = require("obsidian");
var BASE_URL = "https://api.elevenlabs.io/v1";
var ElevenLabsApi = class {
  static async getVoices(apiKey) {
    return (0, import_obsidian2.requestUrl)({
      url: `${BASE_URL}/voices`,
      method: "GET",
      headers: {
        "xi-api-key": apiKey
      }
    });
  }
  static async getModels(apiKey) {
    return (0, import_obsidian2.requestUrl)({
      url: `${BASE_URL}/models`,
      method: "GET",
      headers: {
        "xi-api-key": apiKey
      }
    });
  }
  static async textToSpeech(apiKey, text, voiceId, modelId, options) {
    const data = {
      model_id: modelId,
      text
    };
    if (options) {
      const settings = {
        stability: options.stability / 100,
        similarity_boost: options.similarity_boost / 100
      };
      data.voice_settings = settings;
    }
    return (0, import_obsidian2.requestUrl)({
      url: `${BASE_URL}/text-to-speech/${voiceId}`,
      method: "POST",
      headers: {
        Accept: "audio/mpeg",
        "xi-api-key": apiKey,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(data)
    });
  }
};
var eleven_labs_api_default = ElevenLabsApi;

// src/modals.ts
var import_obsidian5 = require("obsidian");

// src/util/audio.ts
var import_obsidian3 = require("obsidian");

// src/util/file.ts
function generateFilename(voiceName, date) {
  const year = date.getFullYear();
  const month = (date.getMonth() + 1).toString().padStart(2, "0");
  const day = date.getDate().toString().padStart(2, "0");
  const hour = date.getHours().toString().padStart(2, "0");
  const minutes = date.getMinutes().toString().padStart(2, "0");
  const seconds = date.getSeconds().toString().padStart(2, "0");
  return `${year}-${month}-${day}_${hour}-${minutes}-${seconds}_${voiceName}`;
}
function createVaultDirectories(vault, directories) {
  directories.forEach((directory) => {
    if (!vault.getAbstractFileByPath(directory)) {
      vault.createFolder(directory);
    }
  });
}

// src/util/audio.ts
function createAudioNote(vault, text, filename, voiceName, modelName, enabled, stability, similarityBoost, date, notePath) {
  const content = `
**Voice:** ${voiceName}
**Model:** ${modelName}
**Created:** ${date.toLocaleString()}
**Voice Settings Enabled:** ${enabled}
**Stability:** ${stability}
**Similarity Boost:** ${similarityBoost}
**Note:** [[${notePath}]]

${text.split("\n").map((line) => `> ${line}`).join("\n")}

![[ElevenLabs/Audio/${filename}.mp3]]

---
`;
  vault.create(`ElevenLabs/${filename}.md`, content);
}
function createAudioFile(vault, filename, data) {
  vault.createBinary(`ElevenLabs/Audio/${filename}.mp3`, data);
}
async function generateAudio(plugin, text, voiceName, voiceId, modelName, modelId, enabled, stability, similarityBoost) {
  var _a;
  let voiceSettings = void 0;
  if (enabled) {
    voiceSettings = {
      stability,
      similarity_boost: similarityBoost
    };
  }
  const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
  const notePath = (_a = activeView == null ? void 0 : activeView.file) == null ? void 0 : _a.basename;
  try {
    const response = await eleven_labs_api_default.textToSpeech(
      plugin.settings.apiKey,
      text,
      voiceId,
      modelId,
      voiceSettings
    );
    console.log(response);
    const date = new Date();
    const filename = generateFilename(voiceName, date);
    createAudioFile(plugin.app.vault, filename, response.arrayBuffer);
    createAudioNote(
      plugin.app.vault,
      text,
      filename,
      voiceName,
      modelName,
      enabled,
      stability,
      similarityBoost,
      date,
      notePath
    );
    new import_obsidian3.Notice(`Eleven Labs: Created audio file (${filename})`, 5e3);
  } catch (error) {
    console.log(error);
  }
}

// src/util/ui.ts
var import_obsidian4 = require("obsidian");
function renderGenerateAudioButton(parent, callback) {
  new import_obsidian4.ButtonComponent(parent).setClass("btn-generate-audio").setButtonText("Generate audio").onClick(callback);
}
function renderModelLanguageChips(plugin, parent) {
  parent.empty();
  const models = plugin.models;
  const selectedModelId = plugin.settings.selectedModelId || DEFAULT_MODEL_ID;
  const selectedModel = models.find(
    (model) => model.model_id === selectedModelId
  );
  const languages = selectedModel.languages.map((language) => {
    return language.name;
  });
  languages.forEach((language) => {
    parent.createEl("span", {
      text: language,
      cls: "language-chip"
    });
  });
}
function renderVoiceSettings(plugin, parent) {
  parent.empty();
  const selectedVoiceId = plugin.settings.selectedVoiceId || "";
  let voiceSettings = plugin.settings.voiceSettings[selectedVoiceId];
  if (voiceSettings == void 0) {
    voiceSettings = {
      enabled: false,
      stability: 0,
      similarity_boost: 0
    };
    plugin.settings.voiceSettings[selectedVoiceId] = voiceSettings;
  }
  parent.createEl("h6", { text: "Voice settings" });
  const voiceSettingsToggle = new import_obsidian4.ToggleComponent(parent).setValue(voiceSettings.enabled).setTooltip("Enable voice settings").onChange((value) => {
    voiceSettingsContainer.toggle(value);
    plugin.settings.voiceSettings[selectedVoiceId]["enabled"] = value;
  });
  const voiceSettingsContainer = parent.createDiv("voice-settings-container");
  voiceSettingsContainer.createDiv({
    cls: "voice-settings-description",
    text: "These settings will override the stored settings for this voice. They only apply to this audio file."
  });
  voiceSettingsContainer.toggle(voiceSettings.enabled);
  const stabilityInitialValue = plugin.settings.voiceSettings[selectedVoiceId]["stability"] || 0;
  const stabilityEl = voiceSettingsContainer.createEl("div", {
    text: `Stability: ${stabilityInitialValue}`
  });
  const stabilitySlider = new import_obsidian4.SliderComponent(voiceSettingsContainer).setValue(stabilityInitialValue).setLimits(0, 100, 1).onChange((value) => {
    stabilityEl.setText(`Stability: ${value}`);
    plugin.settings.voiceSettings[selectedVoiceId]["stability"] = value;
  });
  const similarityBoostInitialValue = plugin.settings.voiceSettings[selectedVoiceId]["similarity_boost"] || 0;
  const similarityEl = voiceSettingsContainer.createEl("div", {
    text: `Similarity boost: ${similarityBoostInitialValue}`
  });
  const similaritySlider = new import_obsidian4.SliderComponent(voiceSettingsContainer).setValue(similarityBoostInitialValue).setLimits(0, 100, 1).onChange((value) => {
    similarityEl.setText(`Similarity boost: ${value}`);
    plugin.settings.voiceSettings[selectedVoiceId]["similarity_boost"] = value;
  });
  return {
    voiceSettingsToggle,
    stabilitySlider,
    similaritySlider
  };
}
function renderTextSection(parent, selectedText) {
  parent.createDiv("eleven-labs-text-area", (el) => {
    el.createEl("h6", { text: "Text" });
    new import_obsidian4.TextAreaComponent(el).setPlaceholder("Enter text here").setValue(selectedText).setDisabled(true);
    const charCountEl = el.createDiv("char-count");
    charCountEl.setText(`Characters: ${selectedText.length}`);
  });
}
function addVoicesToOptionGroup(voices, optgroupEl, selectedVoiceId) {
  voices.forEach((voice) => {
    const optionEl = optgroupEl.createEl("option", {
      text: voice.name,
      value: voice.voice_id
    });
    if (voice.voice_id === selectedVoiceId) {
      optionEl.setAttribute("selected", "selected");
    }
  });
}
function addCategory(selectEl, label, voices, selectedVoiceId) {
  if (voices) {
    const optgroupEl = selectEl.createEl("optgroup");
    optgroupEl.label = label;
    addVoicesToOptionGroup(voices, optgroupEl, selectedVoiceId);
  }
}
function voicesGroupedByCategory(voices) {
  return voices.reduce((acc, voice) => {
    if (!acc.has(voice.category)) {
      acc.set(voice.category, []);
    }
    acc.get(voice.category).push(voice);
    return acc;
  }, /* @__PURE__ */ new Map());
}
function renderVoiceSelect(plugin, parent, onVoiceSelected) {
  const voices = plugin.voices;
  const selectedVoiceId = plugin.settings.selectedVoiceId || "";
  return parent.createEl("select", "dropdown", (selectEl) => {
    const defaultOptionEl = selectEl.createEl("option", {
      text: "Select a voice"
    });
    defaultOptionEl.setAttribute("selected", "selected");
    defaultOptionEl.setAttribute("disabled", "disabled");
    const groupedByCategory = voicesGroupedByCategory(voices);
    addCategory(
      selectEl,
      "Cloned",
      groupedByCategory.get("cloned"),
      selectedVoiceId
    );
    addCategory(
      selectEl,
      "Generated",
      groupedByCategory.get("generated"),
      selectedVoiceId
    );
    addCategory(
      selectEl,
      "Premade",
      groupedByCategory.get("premade"),
      selectedVoiceId
    );
    selectEl.addEventListener("change", (_) => {
      const selectedOption = selectEl.value;
      plugin.settings.selectedVoiceId = selectedOption;
      plugin.saveSettings();
      onVoiceSelected();
    });
  });
}
function renderModelSelect(plugin, parent, onModelSelected) {
  const models = plugin.models;
  const selectedModelId = plugin.settings.selectedModelId || "";
  const options = models.reduce((acc, obj) => {
    acc[obj.model_id] = obj.name;
    return acc;
  }, {});
  const dropdown = new import_obsidian4.DropdownComponent(parent).addOptions(options).setValue(selectedModelId || DEFAULT_MODEL_ID).onChange((value) => {
    plugin.settings.selectedModelId = value;
    plugin.saveSettings();
    onModelSelected();
  });
  dropdown.selectEl.classList.add("eleven-labs-model-select");
  return dropdown.selectEl;
}

// src/modals.ts
var ElevenLabsModal = class extends import_obsidian5.Modal {
  constructor(plugin, selectedText) {
    super(plugin.app);
    this.plugin = plugin;
    this.selectedText = selectedText;
    this.shouldRestoreSelection = true;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.addClass("eleven-labs-modal");
    let voiceSettings;
    let voiceSelectEl;
    let modelSelectEl;
    contentEl.createDiv("settings", (el) => {
      voiceSelectEl = renderVoiceSelect(this.plugin, el, () => {
        voiceSettings = renderVoiceSettings(
          this.plugin,
          voiceSettingsContainer
        );
      });
      modelSelectEl = renderModelSelect(this.plugin, el, () => {
        renderModelLanguageChips(this.plugin, languageChipsContainer);
      });
      const languageChipsContainer = el.createDiv("chips-container");
      renderModelLanguageChips(this.plugin, languageChipsContainer);
      el.createEl("hr");
      const voiceSettingsContainer = el.createDiv("voice-settings");
      voiceSettings = renderVoiceSettings(
        this.plugin,
        voiceSettingsContainer
      );
      el.createEl("hr");
    });
    renderTextSection(contentEl, this.selectedText);
    contentEl.createDiv("actions", (el) => {
      renderGenerateAudioButton(el, () => {
        new import_obsidian5.Notice("Eleven Labs: Generating audio...", 5e3);
        createVaultDirectories(this.app.vault, [
          "ElevenLabs",
          "ElevenLabs/Audio"
        ]);
        generateAudio(
          this.plugin,
          this.selectedText,
          voiceSelectEl.options[voiceSelectEl.selectedIndex].text,
          voiceSelectEl.value,
          modelSelectEl.options[modelSelectEl.selectedIndex].text,
          modelSelectEl.value,
          voiceSettings.voiceSettingsToggle.getValue(),
          voiceSettings.stabilitySlider.getValue(),
          voiceSettings.similaritySlider.getValue()
        );
        this.close();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// main.ts
var ElevenLabsPlugin = class extends import_obsidian6.Plugin {
  constructor() {
    super(...arguments);
    this.addContextMenuItems = (menu, editor, info) => {
      menu.addItem((item) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian6.MarkdownView);
        const selectedText = markdownView == null ? void 0 : markdownView.editor.getSelection();
        item.setTitle("Eleven Labs").setIcon("file-audio").onClick(async () => {
          if (selectedText != null) {
            new ElevenLabsModal(this, selectedText).open();
          }
        });
        item.setDisabled(selectedText == null);
      });
    };
    this.openModalCommand = {
      id: "eleven-labs-open-modal",
      name: "Open Modal",
      editorCheckCallback: (checking, editor, view) => {
        const selectedText = view == null ? void 0 : view.editor.getSelection();
        if (selectedText) {
          if (!checking) {
            new ElevenLabsModal(this, selectedText).open();
          }
          return true;
        }
        return false;
      }
    };
  }
  async onload() {
    await this.loadSettings();
    this.loadVoices();
    this.loadModels();
    this.app.workspace.on("editor-menu", this.addContextMenuItems);
    this.addCommand(this.openModalCommand);
    this.addSettingTab(new ElevenLabsSettingTab(this.app, this));
  }
  onunload() {
    this.app.workspace.off("editor-menu", this.addContextMenuItems);
  }
  async loadVoices() {
    try {
      const response = await eleven_labs_api_default.getVoices(
        this.settings.apiKey
      );
      this.voices = response.json.voices;
    } catch (error) {
      console.log(error);
    }
  }
  async loadModels() {
    try {
      const response = await eleven_labs_api_default.getModels(
        this.settings.apiKey
      );
      this.models = response.json.filter(
        (m) => m.can_do_text_to_speech
      );
    } catch (error) {
      console.log(error);
    }
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
